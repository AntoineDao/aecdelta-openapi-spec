{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"github.com/gin-gonic/gin"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    store "github.com/myname/myrepo/pkg/store"
	//
	store "github.com/antoinedao/aecdelta-go-server/pkg/store"
){{#operation}}

// {{nickname}} - {{notes}}
func {{nickname}}(c *gin.Context) {
	{{#allParams}}
	{{#isPathParam}}
	// Get {{paramName}} path parameter
	{{paramName}} := c.Param("{{paramName}}")

	{{/isPathParam}}
	{{#isQueryParam}}
	// Get {{paramName}} query parameter
	{{paramName}} := c.DefaultQuery("{{paramName}}", "")

	{{/isQueryParam}}
	{{#isBodyParam}}
	// Get {{paramName}} payload
	var {{paramName}} {{dataType}}
	c.BindJSON(&{{paramName}})

	{{/isBodyParam}}
	{{/allParams}}
	{{#returnSimpleType}}
	// Initialise response object
	response := {{returnType}}{}
	{{/returnSimpleType}}
	{{^returnSimpleType}}
	{{#isListContainer}}
	// Initialise response object
	response := {{returnType}}{}
	{{/isListContainer}}
	{{^isListContainer}}
	// Set default response
	response := "{{responses.0.message}}"
	{{/isListContainer}}
	{{/returnSimpleType}}

	// Execute operation from the store package
	err := store.{{nickname}}(c{{#returnSimpleType}}, &response{{/returnSimpleType}}{{#isListContainer}}, &response{{/isListContainer}}{{#allParams}}, {{paramName}}{{/allParams}})

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON({{responses.0.code}}, response)
}{{/operation}}{{/operations}}
